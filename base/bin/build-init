#!/usr/bin/env bash

# This script sets up a sandbox environment for the build on the remote docker host.

# Cleanup
echo "Setting up remote build environment..."
ssh docker-host "(cd $REMOTE_BUILD_DIR && fin rm -f 2>/dev/null) || true"
ssh docker-host "sudo rm -rf $REMOTE_BUILD_DIR 2>/dev/null; mkdir -p $REMOTE_BUILD_DIR"

# Note: build-exec = ssh docker-host "cd $REMOTE_BUILD_DIR && ($@)"

# Checkout sources
build-exec "git clone --branch="$GIT_BRANCH_NAME" --depth 50 $GIT_REPO_URL . && git reset --hard $GIT_COMMIT_HASH && ls -la"

# Configure sandbox settings
echo "Configuring sandbox settings..."
build-exec "echo COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME | tee -a .docksal/docksal-local.env"
build-exec "echo VIRTUAL_HOST=$DOMAIN | tee -a .docksal/docksal-local.env"

# Basic HTTP Auth
if [[ "${HTTP_USER}" != "" ]] && [[ "${HTTP_PASS}" != "" ]]; then
	echo "Configuring sandbox Basic HTTP Authentication..."
	build-exec "echo APACHE_BASIC_AUTH_USER=$HTTP_USER | tee -a .docksal/docksal-local.env"
	build-exec "echo APACHE_BASIC_AUTH_PASS=$HTTP_PASS | tee -a .docksal/docksal-local.env"
fi

# Pass build secrets to sandbox
# A "secret" is any environment variable that starts with "SECRET_"
secrets="$(env | grep 'SECRET_')"
if [[ "$secrets" != "" ]]; then
	echo "Passing build secrets to sandbox..."
	build-exec "echo '$secrets' | tee -a .docksal/docksal-local.env >/dev/null"
fi
